{% set var_app_domain = '{User Domain}' %}
{% import "views/_helper.njk" as docs %}

{% raw %}<script>$(window).load(function() {$('.do-expand-all').click();})</script>{% endraw %}

# LeanEngine {{platformName}} Web Hosting Guide

Web hosting is a sub-module of LeanEngine; it allows you to develop a web application with {{platformName}}.

It provides cloud functions and hooks, hosting for static files and custom routing. You can also bind your own domain names to the service.
You can use it to create landing/download pages for your mobile applications, develop an admin console or a complete website, or run custom logic that has to be on the server side.

If you don't know how to create a LeanEngine project, debug it locally and deploy it to the cloud, please first read [LeanEngine Quick Start](leanengine_quickstart.html). Other related documents include:

 - [LeanEngine Service Overview](leanengine_overview.html) (Overview of all features)
 - [Command Line Tool Usage Guide](leanengine_cli.html)
 - [LeanCache Usage Guide](leancache_guide.html) (using the in-memory cache service to improve performance)
 - [LeanEngine Project Examples](leanengine_examples.html)
 - [LeanEngine FAQs](leanengine_faq.html)

This document uses {{platformName}} as an example, but LeanEngine supports many other languages. You can choose the technology stack you are familiar with for development:

- [Node.js](leanengine_webhosting_guide-node.html)
- [Python](leanengine_webhosting_guide-python.html)
- [PHP](leanengine_webhosting_guide-php.html)
- [Java](leanengine_webhosting_guide-java.html)
- [C#](leanengine_webhosting_guide-dotnet.html)


## Starting with the example project

{% block getting_started %}{% endblock %}

### Local operation and debugging

After all dependencies are installed, you can use our command-line tool in the project root directory to start a development server:


```sh
lean up
```

Please refer to the [Command Line Tool Usage Guide](leanengine_cli.html) for more on the command-line tool and local debugging.

### Deploying to the cloud


Run in your project root directory:

```sh
lean deploy
```

###  Setting up the domain name

In the "Web Hosting Domain Name" section of [LeanEngine > Settings](/cloud.html?appid={{appid}}#/conf), you can fill in a custom second-level domain name. For example, if you set `myapp`, you can access your website through our second-level domain name `http://myapp.avosapps.us`.


<div class="callout callout-info">You may need to wait a few hours till DNS settings are effective</div>

Our second-level domains support HTTPS by default.

If your app has no requests in 30 days and you haven't purchased a standard instance, the second-level domain may be recycled.

{% block runtime_description %}{% endblock %}

{% block project_constraint %}{% endblock %}

{% block custom_runtime %}{% endblock %}

{% block project_start %}{% endblock %}

{% block supported_frameworks%}{% endblock %}

{% block use_leanstorage %}{% endblock %}

## Health monitoring

When your application is deployed, LeanEngine's hypervisor will check if it is started successfully every second. The deployment is considered a failure if the check still fails after 30 seconds. After the application starts running normally, regular health monitoring ensures that your app is healthy. And if health monitoring fails, the LeanEngine hypervisor will automatically restart your app.

The URL for health monitoring includes the root path of your application(`/`) and `/__engine/1/ping` which is normally handled by the {{platformName}}. As long as  **one of the two** returns a HTTP response code of 200, the application is considered healthy. So make sure your program uses the {{platformName}} SDK, or your app root path returns 200 as the HTTP status code.
In addition, in order to support cloud functions and hooks in LeanEngine, the hypervisor will use the URL `/1.1/functions/_ops/metadatas` to communicate with the {{platformName}} SDK. Please the {{platformName}} SDK handle this path, or return 404 as the HTTP response code to indicate that cloud functions and hooks are not used.

{% block ping %}
Please refer to the previous section [Using LeanStorage](#Using LeanStorage) for how to install and use the {{platformName}} SDK,
{% endblock %}

{% block generalFeature %}

## Session management

{% block cookie_session %}{% endblock %}

## Implementing common features

### Sending HTTP request

{% block http_client %}{% endblock %}

### Obtaining client IP

If you want to get the client's IP, you can get it directly from the `x-real-ip` HTTP header.

{% block code_get_client_ip_address %}{% endblock %}

### Uploading files
Websites hosted on {{productName}} can handle file uploads using the file-related API in the {{sdk_name}} SDK.

Assuming the front-end HTML code is like:

```html
<form enctype="multipart/form-data" method="post" action="/upload">
  <input type="file" name="iconImage">
  <input type="submit" name="submit" value="submit">
</form>
```

{% block upload_file_special_middleware %}{% endblock %}

Next, define the handler function, build a Form object, and parse req as a parameter, it will save the uploaded file to the temporary directory, and construct the file object:

{% block code_upload_file_sdk_function %}{% endblock %}

### Session
{% block custom_session %}
{{platformName}} Not supported yet
{% endblock %}

### CSRF Token
If your LeanEngine application uses cookies as an authentication method (for example, using the SDK's CookieSession middleware); then there is a risk of [CSRF](https://github.com/pillarjs/understanding-csrf) attack. It will allow other sites to forge malicious requests with valid cookies.

CSRF tokens are usually used to defend against CSRF attacks. You need to pass a random string (the CSRF token, which can be passed in the cookie) to the client. The client must include the CSRF token in the request body or in the header. The server verifies that the CSRF Token is correct.

{% block csrf_token %}{% endblock %}

{% endblock %}

### LeanCache

[LeanCache](http://localhost:9000/leancache_guide.html) is a cache service provided by LeanCloud for high-traffic sites.

{% block leancache %}{% endblock %}

For more instruction on how to use LeanCache, see the [LeanCache Usage Guide](leancache_guide.html).

### Redirecting to HTTPS


For security consideration, it is recommended that all sites use HTTPS by default. We provide full support for HTTPS.

There is a middleware in {{productName}} to force your website `{{var_app_domain}}.leanapp.cn` to be accessed via https. All you have to do is to add it:

{% block https_redirect %}{% endblock %}

When a user accesses your site with HTTP, she will be redirected to the HTTPS URL.

{% block extra_examples %}{% endblock %}

## Deploying and publishing

### Deploying with the commandline tool

Run in you project root directory:

```sh
lean deploy
```

The command line tool makes it easy to deploy, publish, view application status, view logs, and even support multiple application deployments. Please refer to the [Command Line Tool Guide](leanengine_cli.html) for specific usage.

### Dependency cache

LeanEngine implements a caching mechanism to speed up the build process. The build process the installs dependencies for your project. For each new build, if the dependencies are not changed, the dependencies installed last time are used. Only the application code is replaced.

{% block depentencyCache %}{% endblock %}

If you are encountering problems with installing dependencies, you can enable the "Download latest dependencies" option when deploying from the web console, or add the `--no-cache` option when deploying with the command line tool.

```sh
lean deploy --no-cache
```

Dependency caching might fail for a number of reasons. Therefore, it is not guaranteed that the cache is utilized for each eligible build.

### Deploying from Git repo

You can also deploy from your Git repository. You need to push the project to a git repository. Good third-party services that provide Git hosting include [GitHub](https://github.com/), [BitBucket](https://bitbucket.com/), and [Gitlab](http://gitlab.org/).

After you push your code to a repository accessible from the Internet, please fill in the repo URL in LeanEngine settings in the web console. If it is a public repository and has an HTTPS URL, it is preferred: `https://github.com/<username>/<repoName>.git`.

If the repo is not accessible through HTTPS, you need to fill in the ssh address <code>git&commat;github.com:&lt;USERNAME&gt;/&lt;REPO-NAME&gt;.git</code>. If it is a private repo, you also need to add the deploy key to your repo (shown in LeanEngine settings in the web console) and give it read access. For example, on GitHub you can add deploy keys in the project's Settings => Deploy keys.

After the setup, you can deploy from the web in the web console.
By default, it will deploy the code of the master branch. You can also fill in another branch name,a label or a specific commit hash.

### Staging environment and production environment

By default, LeanEngine only has one "production environment" and the corresponding domain name is `{{var_app_domain}}.leanapp.cn`. There is a "trial instance" in the production environment to run the application.

When the trial instance of the production environment is upgraded to standard instance, there will be an additional "staging environment" with the corresponding domain name `stg-{{var_app_domain}}.leanapp.cn`, both environments access the same data. You can test your LeanEngine code with the staging environment. You can deploy each code change to the prepared environment for testing, before publishing to the production environment. If you want to have a test environment with an independent data source, it is recommended to create an application separately.

<div class="callout callout-info"> If you encounter an "Application not Found" error when accessing LeanEngine, it is usually because code hasn't been deployed to the corresponding environment yet. For example, an application may not have a staging environment, or the application has not yet deployed code to the production environment. </div>

Sometimes you may need to know what environment the current process is running in (development, staging or production) and then have different behaviors:

{% block get_env %}{% endblock %}

Client sdk has methods similiar to `setProduction` , for example [AV.setProduction(production) of JavaScript SDK API](leanengine_cloudfunction_guide-node.html#hash1210911107). If the `production` here is set to `0` ,then the SDK will send requests to the staging environment; if set to `1` , it will send requests to the production environment. The default is `1`.

## Cloud runtime environment

### System level dependencies

System-level dependencies refer to required programs that are external to the project's programming languages, such as [ffmpeg](https://www.ffmpeg.org/). You can add system dependencies in `leanengine.yaml`:

```yaml
systemDependencies:
  - imagemagick
```

Supported dependencies are:

- `ffmpeg` - An audio and video processing tool and library
- `imagemagick` - An image processing tool and library
- `fonts-wqy` - Wenquanyi Bitmap song and Wenquanyi Micro black fonts, usually used with phantomjs to display Chinese characters.
- `phantomjs` - A headless Webkit browser.

System-level dependencies are not added by default. Adding system dependencies will slow down the deployment. Please don't add unused dependencies.


###  Environment variables

The LeanEngine platform provides the following environment variables by default:

Variable name|explanation
---|---
`LEANCLOUD_APP_ID` | Current App ID
`LEANCLOUD_APP_KEY` | Current App key
`LEANCLOUD_APP_MASTER_KEY`|Current master key
`LEANCLOUD_APP_ENV` | Current application environemnt <ul><li>Depending on how you start the local development instance, this variable may not exist or may be set to `development`</li> </li><li>Staging environment: `stage`</li><li>Production environment: `production`</li></ul>
`LEANCLOUD_APP_PORT` | Port the application should listen on. Other ports are not accessible externally.
`LEANCLOUD_API_SERVER` | The URL used to access LeanStorage. This value is different for each application and may change overtime. So use this variable when calling our REST API in LeanEngine. Do not hard-code the URL.
`LEANCLOUD_AVAILABLE_CPUS` | The number of CPUs available to the LeanEngine instance. Its value depends on the instance type you choose. The application can start a corresponding number of threads or processes based on this value. **Do not** rely on other means to obtain the number of CPU cores, otherwise you may start too many processes and make your application less efficient.
`LEANCLOUD_APP_GROUP`|The group to which this instance belongs. When using the LeanEngine [Group Management](leanengine_plan.html#Group Management) feature, this is the name of the group.
`LEANCLOUD_REGION` | Country code of where the instance is located.

You can also add custom environment variables at [LeanEngine > Settings > Custom Environment Variables](/dashboard/cloud.html?appid={{appid}}#/conf) on the web console. Variable names should only include letters, numbers, and underscores, and it must begin with a letter. The value is a string. New environment variables will take effect after the next deployment.

A common practice is to store configuration in environment variables, so that they can be changed without touch the code. You can also store secrets such as API keys of third-party services in environment variables so that they are not exposed in code, especially if it's open-source.

{% block code_calling_custom_variables %}{% endblock %}

{% call docs.alertWrap() %}
The environment variables provided by LeanEngine {% if platformName | lower == 'node.js' %}(and the Node.js environment variable `NODE_ENV`){% endif %} cannot be overwritten by custom environment variables.

{% endcall %}

### Load balancing

On LeanEngine, requests from the clients go through a load balancer before reaching your app. The load balancer handles SSL encryption/decryption, data compression, etc., so you don't have to add HTTPS or gzip-related functionality to your app.

Load balancing also limits the maxium request size to 100MB (including uploading files to LeanEngine), maximum request processing time to 60 seconds, maximum WebSocket idle time to 60 seconds.

### File System

You can write temporary files to the `/home/leanengine` or `/tmp` directories, up to 1GB in total.

Each time LeanEngine is deployed, a new container is created. Even when there's no deployments, system maintanence may occasionally replace containers, which means that **you can't treat the local file system as a persistent storage**.

If the files are large, your code should delete them as soon as possible. If more than 1GB of disk space is used, you may receive "disk quota exceeded" errors. You can redeploy to clear out the files.

### Log

In the [LeanEngine/Logs](/cloud.html?appid={{appid}}#/log) page of the web console, you can view LeanEngine's deployment and runtime logs and filter logs by levels.

[The command line tool](leanengine_cli.html#View Log) can export logs of the last seven days to local files.

Logs written to "standard output" and "standard error" correspond to the log levels `info` and `error` respectively. For example, the following code will write 'hello' at the `info` level:
{% block loggerExample %}{% endblock %}

<div class="callout callout-info">Each log line has a maximum of 4096 characters. The characters exceeding the limit are discarded. The maximum log output frequency is 600 lines/minute. Lines exceeding limit are discarded. </div>

{% block loggerExtraDescription %}{% endblock %}

LeanEngine's access log can be exported from [App Console > LeanEngine > Access Log](/cloud.html?appid={{appid}}#/accesslog) on the web console.

### Time zone

The time zone used on the server is UTC.

{% block section_timezone %}{% endblock %}

### Public IP addresses

If you need to configure IP whitelists on third-party services (such as WeChat) and needs to obtain LeanEngine's public IP addresses, please go to [Control Panel > LeanEngine > Settings > Public IPs](/dashboard/ Cloud.html?appid={{appid}}#/conf).

We will minimize changes to the public IPs but cannot eliminate the possibility of changes. In case of IP-related problems, please double check if the public IPs have changed. We will give advance notice for non-emergency scheduled changes.

## Custom domain names

We recommend that you register your own domain name and bind it to your LeanEngine production environment. You can bind a custom domain name at [App Console > Account Settings > Domain Binding](/settings.html#/setting/domainbind).
