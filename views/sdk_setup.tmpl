{% import "views/_helper.njk" as docs %}

# How to Install the {{platform_name}} SDK

## Installing SDK

{% if platform_name === "Objective-C" or platform_name === "Swift" or platform_name === "Python" or platform_name === "PHP" or platform_name === "Java" %}
There are several ways for you to install our SDK and the most convenient one is to use a package manager.

### Installing with Package Manager

{% if platform_name === "Objective-C" %}
The easiest way to integrate our SDK into your project is to use [CocoaPods](https://cocoapods.org).

Add the following pods into the `target` of `Podfile`:

```ruby
pod 'AVOSCloud'   # (required) LeanStorage, SMS, LeanEngine etc.
pod 'AVOSCloudIM' # (optional) LeanMessage
pod 'AVOSCloudLiveQuery' # (optional) LiveQuery
```

After adding the pods, run `pod update` or `pod install --repo-update` under the same directory to complete the installation.

After installing the SDK, you can open your project with `<PROJECT_NAME>.xcworkspace` under the root directory of your project.

{% endif %}
{% if platform_name === "Swift" %}
You can use [CocoaPods](https://cocoapods.org) or [Swift Package Manager][SPM] to manage your project's dependencies.

[SPM]: https://developer.apple.com/documentation/swift_packages

#### Swift Package Manager

Just add the [swift-sdk] repository.

[swift-sdk]: https://github.com/leancloud/swift-sdk

#### CocoaPods

Add the following pods into the `target` of `Podfile`:

```ruby
pod 'LeanCloud'
```

or use the [Subspecs](https://guides.cocoapods.org/syntax/podspec.html#subspec) way:

```ruby
pod 'LeanCloud/Foundation' # (required) LeanStorage, SMS, LeanEngine etc.
pod 'LeanCloud/RTM' # (optional) LeanMessage, LiveQuery
# LeanCloud/RTM depends on LeanCloud/Foundation, so their versions must be consistent.
```

Then install the SDK with the following command:

```sh
$ pod update
```

Or

```sh
$ pod install --repo-update
```

See [official documentation](https://guides.cocoapods.org/using/pod-install-vs-update.html) for the differences between them.

After installing the SDK, you can open your project with `<PROJECT_NAME>.xcworkspace` under the root directory of your project.

{% endif %}
{% if platform_name === "Python" %}
The easiest way to integrate our SDK into your project is to use `pip`. Run the following command to install it:

```sh
pip install leancloud
```

You may also install the SDK with `easy_install`:

```sh
easy_install leancloud
```

Depending on the environment you're using, you may need to add `sudo` at the beginning of the command.
{% endif %}
{% if platform_name === "PHP" %}
#### composer

The easiest way to integrate our SDK into your project is to use composer. Run the following command to install it:

```sh
composer require leancloud/leancloud-sdk
```

Keep in mind that `leancloud-sdk` depends on the `curl` extension (you may need to install `php-curl` if you are using Linux).
{% endif %}
{% if platform_name === "Java" %}
You can add our SDK into your project with a package manager of your own choice.

#### LeanStorage

For Maven:

```xml
<dependency>
    <groupId>cn.leancoud</groupId>
    <artifactId>storage-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

For Ivy:

```xml
<dependency org="cn.leancloud" name="storage-core" rev="{{ version.unified }}" />
```

For SBT:

```sbt
libraryDependencies += "cn.leancloud" %% "storage-core" % "{{ version.unified }}"
```

For Gradle:

```groovy
implementation 'cn.leancloud:storage-core:{{ version.unified }}'
```

If you are building for Android, use the following packages instead:

```groovy
implementation 'cn.leancloud:storage-android:{{ version.unified }}'
implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
```

#### LeanMessage

For Maven:

```xml
<dependency>
    <groupId>cn.leancloud</groupId>
    <artifactId>realtime-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

For Ivy:

```xml
<dependency org="cn.leancloud" name="realtime-core" rev="{{ version.unified }}" />
```

For SBT:

```scala
libraryDependencies += "cn.leancloud" %% "realtime-core" % "{{ version.unified }}"
```

For Gradle:

```groovy
implementation 'cn.leancloud:realtime-android:{{ version.unified }}'
implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
```

{% endif %}


### Installing Manually

<a class="btn btn-default" target="_blank" href="sdk_down.html">Download SDK</a>

{% if platform_name === "Objective-C" %}
#### Downloading Source Code

Clone the repository of the SDK to the root directory of the project:

```sh
git clone "https://github.com/leancloud/objc-sdk.git" leancloud-objc-sdk
```

Then check out the version you wish to use. The versions of the SDK are marked with tags so that you can check out the latest version with the following command:

```sh
cd leancloud-objc-sdk
git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
```

#### Integrating SDK

The following two ways can be used to add the SDK into your project. You may select **any one of them**:

- Add the `xcodeproj` file of the SDK into the project.
- Compile the SDK into frameworks and add them to the project.

##### Integrating `xcodeproj`

Drag and drop `AVOS`/`AVOS.xcodeproj` into the project as a subproject:

!["AVOS.xcodeproj" will appear under the root directory of the project.](images/quick_start/ios/subproject.png)

Then set up Build Phases for the project. Add the following contents into **Link Binary With Libraries**:

!["AVOSCloud.framework from 'AVOSCloud-iOS' target in 'AVOS' project" and "AVOSCloudIM.framework from 'AVOSCloudIM-iOS' target in 'AVOS' project" under "Workspace".](images/quick_start/ios/link-binary.png)

Here we chose `AVOSCloud` and `AVOSCloudIM` as examples of frameworks being used. You can make your selections according to the platform you are building for and the modules you are using.

#### Adding System Dependencies

Now add the system frameworks and libraries the SDK depends on:

  * `libz`
  * `libc++`
  * `libicucore`
  * `libsqlite3`
  * `SystemConfiguration.framework`
  * `MobileCoreServices.framework`
  * `CoreTelephony.framework`
  * `CoreLocation.framework`

Like this:

![The frameworks and libraries mentioned above show up in "Link Binary With Libraries".](images/quick_start/ios/system-dependency.png)

The last step is to add `-ObjC` into **Other Linker Flags**.

You're all set!
{% endif %}
{% endif %}
{% if platform_name === "JavaScript" %}
Depending on the platform you're using, there are different ways for you to install the SDK.

|[<img src="images/platforms/html5.svg" width="120"/>](#web)|[<img src="images/platforms/node-js.svg" width="120"/>](#node-js)|[<img src="images/platforms/react-native.svg" width="120"/>](#react-native)|[<img src="images/platforms/electron.svg" width="120"/>](#electron)|[<img src="images/platforms/other.svg" width="100"/>](#other)|
|:--:|:--:|:--:|:--:|:--:|
|Web|Node.js|React Native|Electron|Other|

### Web

The following method can be used if your project runs in browser, WebView, or other in-app HTML platforms.

#### Installing and Referencing SDK

##### npm

The easiest way to integrate our SDK into your project is to use npm:

```LeanStorage
$ npm install leancloud-storage --save
```
```LeanStorage(LiveQuery)
$ npm install leancloud-storage --save
```
```LeanMessage
$ npm install leancloud-realtime --save
```
```LeanMessage(RichMediaMessage)
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage --save
```

Create references to the SDK with `require`:

```LeanStorage
const AV = require('leancloud-storage');
const { Query, User } = AV;
```
```LeanStorage(LiveQuery)
const AV = require('leancloud-storage/live-query');
const { Query, User } = AV;
```
```LeanMessage
const { Realtime, TextMessage } = require('leancloud-realtime');
```
```LeanMessage(RichMediaMessage)
const AV = require('leancloud-storage');
const { Realtime, TextMessage } = require('leancloud-realtime');
// For a list of all members exposed by Rich Media Message Plugin, refer to its API doc: https://leancloud.github.io/js-realtime-sdk/plugins/typed-messages/docs/module-leancloud-realtime-plugin-typed-messages.html
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
```

{{ docs.langSpecStart('LeanMessage LeanMessage(RichMediaMessage)') }}
To avoid compatibility issues, the JavaScript SDK has been distributing ES5 code with all the polyfills (e.g. Promise) bundled.
Since v5.0.0-rc.2, the JavaScript LeanMessage SDK also offers a version targeted to the latest version of ECMAScript, which has a smaller size and better runtime optimization for use in scenarios that only need compatibility with latest browsers.
If your application uses `@babel/preset-env` or something similar, you can also use the latest ECMAScript version of LeanCloud SDK, and let Babel or other tools to compile your code to the specific ECMAScript version you need.
Since the latest version of ECMAScript changes every year, and the goal of that version is to provide code that is aligned with the latest standards, introducing new features from newer versions of ECMAScript will not be considered as a breaking change.
The current version of ECMAScript is 2020.

If you want to try out this version:

```js
const { Realtime } = require('cleancloud-realtime/es-latest');
```

{{ docs.langSpecEnd('LeanMessage LeanMessage(RichMediaMessage)') }}

##### CDN

You can also import the SDK with a `script` tag:

```LeanStorage
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-min.js"></script>
```
```LeanStorage(LiveQuery)
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-live-query-min.js"></script>
```
```LeanMessage
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im-browser.min.js"></script>
```
```LeanMessage(RichMediaMessage)
<!-- Rich Media Message depends on LeanStorage. -->
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-min.js"></script>
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im-browser.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime-plugin-typed-messages"></script>
````

When using this method, you can reference the SDK with the global variable `AV`:

```LeanStorage
const { Query, User } = AV;
```
```LeanStorage(LiveQuery)
const { Query, User } = AV;
```
```LeanMessage
const { Realtime, TextMessage } = AV;
```
```LeanMessage(RichMediaMessage)
const { Realtime, TextMessage, TypedMessagesPlugin, ImageMessage } = AV;
```

{{ docs.langSpecStart('LeanMessage') }}

If you want to try out the latest ECMAScript version of LeanMessage SDK:

```html
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/es-latest/im.js"></script>
```

{{ docs.langSpecEnd('LeanMessage') }}

### Node.js

JavaScript SDK also works with Node.js. If you plan to use LeanStorage within LeanEngine, you can import `leanengine` into your project by following instructions in [LeanEngine Quick Start](leanengine_quickstart.html).

#### Installing and Referencing SDK

You can use npm to install and reference our SDK for Node.js as well. See [npm](#npm) for more details.

### React Native

You can use npm to install and reference our SDK for React Native.
React Native support is provided by a separate adapter library (`@leancloud/platform-adapters-react-native`).

Installing:

```LeanStorage
# Step 1: Install
$ yarn add leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo >= 38
# No need to link.
```
```LeanStorage(LiveQuery)
# Step 1: Install
$ yarn add leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo >= 38
# No need to link.
```
```LeanMessage
yarn add leancloud-realtime @leancloud/platform-adapters-react-native
```
```LeanMessage(RichMediaMessage)
# Step 1: Install
$ yarn add leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo >= 38
# No need to link.
```

Referencing:

```LeanStorage
import AV from 'leancloud-storage/core';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
```
```LeanStorage(LiveQuery)
import AV from 'leancloud-storage/live-query-core';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
```
```LeanMessage
import { Realtime, setAdapters } from 'leancloud-realtime/im';
import * as adapters from '@leancloud/platform-adapters-react-native';
setAdapters(adapters);
```
```LeanMessage(RichMediaMessage)
import AV from 'leancloud-storage/core';
import { Realtime, setAdapters } from 'leancloud-realtime/im';
import { TypedMessagesPlugin, ImageMessage } from 'leancloud-realtime-plugin-typed-messages';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
setAdapters(adapters);
```

### Electron

Electron uses npm for managing dependencies. You can install our SDK with the following command:

```LeanStorage
$ npm install leancloud-storage --save
```
```LeanStorage(LiveQuery)
$ npm install leancloud-storage --save
```
```LeanMessage
$ npm install leancloud-realtime --save
```
```LeanMessage(RichMediaMessage)
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage --save
```

#### Importing SDK as Browser Scripts

You can import the SDK by adding a `script` tag into index.html:

```LeanStorage
<script src="./node_modules/leancloud-storage/dist/av-min.js"></script>
```
```LeanStorage(LiveQuery)
<script src="./node_modules/leancloud-storage/dist/av-live-query-min.js"></script>
```
```LeanMessage
<script src="./node_modules/leancloud-realtime/dist/im-browser.min.js"></script>
```
```LeanMessage(RichMediaMessage)
<script src="./node_modules/leancloud-storage/dist/av-min.js"></script>
<script src="./node_modules/leancloud-realtime/dist/im-browser.min.js"></script>
<script src="./node_modules/leancloud-realtime-plugin-typed-messages/dist/typed-messages.js"></script>
```

#### Importing SDK as Node.js Modules

The way of using `script` to import the SDK works in most scenarios. However, if you have the following needs, you can also use `require('leancloud-storage')` to import the SDK as Node.js modules:

- Using the SDK in the main process
- Constructing `AV.File` with `Buffer` or `Stream` provided by Node.js

{{ docs.note("`require` and `script` import two different sets of SDK. Each of them needs to be initialized separately and cannot be used interchangeably.") }}

### Other

The JavaScript SDK provides platform-independent versions to support other platforms.
All platform-related APIs are abstracted into configurable adapters, which need to be configured for the target platform after introducing the SDK core.
Assuming there is an adapter package (`platform-adapters-xyz`) for a platform (xyz) on npm, you can configure the JavaScript SDK as follows:

```LeanStorage
const AV = require('leancloud-storage/core');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
```
```LeanStorage(LiveQuery)
const AV = require('leancloud-storage/live-query-core');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
```
```LeanMessage
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const adapters = require('platform-adapters-xyz');
setAdapters(adapters);
```
```LeanMessage(RichMediaMessage)
const AV = require('leancloud-storage/core');
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
setAdapters(adapters);
```

Precompiled UMD files are also available, in case you cannot or do not want to use npm:

```LeanStorage
https://cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-core-min.js
```
```LeanStorage(LiveQuery)
https://cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-live-query-core-min.js
```
```LeanMessage
https://cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im.min.js
```
```LeanMessage(RichMediaMessage)
not supported
```

You can implement your own adapter for a target platform.
Interface definitions for adapters can be found in the [@leancloud/adapter-types] package.
You can also search for adapters contributed by other developers with the keyword [platform-adapters].

[platform-adapters]: https://www.npmjs.com/search?q=keywords:platform-adapters
[@leancloud/adapter-types]: https://unpkg.com/browse/@leancloud/adapter-types@1.0.2/types.d.ts

{% endif %}
{% if platform_name === "Flutter" %}
#### LeanStorage

Specify [leancloud_storage] as dependency in `pubspec.yaml`:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ...
  leancloud_storage: ^{{ version.flutter_storage }}
```

[leancloud_storage]: https://pub.dev/packages/leancloud_storage

You can run `flutter pub get` to install dependencies.

#### LeanMessage

Specify [leancloud_official_plugin] as dependency in `pubspec.yaml`:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ...
  leancloud_official_plugin: ^{{ version.flutter_official_plugin }}
```

[leancloud_official_plugin]: https://pub.dev/packages/leancloud_official_plugin

[leancloud_official_plugin] is based on native SDKs, so you also need to configure them.

Android:

```yaml
# android/app/build.gradle
dependencies {
  implementation 'cn.leancloud:storage-android:{{ version.unified }}'
  implementation 'cn.leancloud:realtime-android:{{ version.unified }}'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}
```

iOS:

```sh
$ cd ios/
$ pod update
```

{% endif %}
{% if platform_name === ".NET" %}
### Unity

- Supports Unity 5.3+.
<!-- 等升级 Unity 即时通讯的文档后再增加这句话 -->
<!-- - 支持 .NET 4.x。SDK 在 .NET 3.x 版本下仅做 Bug 维护，不再增加新版本，请大家尽快升级到 4.x 版本。 -->

Supports iOS, Android, UWP, Windows Desktop, and web games built with Unity.

#### Installing LeanStorage

Download the latest version of [Unity Storage](https://releases.leanapp.cn/#/leancloud/unity-sdk/releases), unzip it, and import it into your Unity project.

#### Installing LeanMessage

Download the latest version of [Unity Realtime](https://releases.leanapp.cn/#/leancloud/realtime-SDK-dotNET/releases), unzip it, and import it into your Unity project.

#### Breakdown

You will find the following dependencies after unzipping the files:

Name|Description|Required
--|---|---
`AssemblyLister.dll`|LeanCloud dependency detection module. Used to check if dependencies are imported correctly.|Yes
`LeanCloud.Core.dll`|Core library. Includes definitions and methods for built-in types like `AVObject` and `AVUser`.|Yes
`LeanCloud.Storage.dll`|LeanStorage library. Includes methods for local caching and HTTP requests.|Yes
`LeanCloud.Realtime.dll`|LeanMessage library. Includes methods used for LeanMessage services.|No

### .NET Framework

.NET Framework supports the .NET Framework 4.5+ runtime.

Install nuget in Visual Studio:

```sh
# LeanStorage (required)
PM> Install-Package LeanCloud.Storage
# LiveQuery (optional)
PM> Install-Package LeanCloud.LiveQuery
# LeanMessage (optional)
PM> Install-Package LeanCloud.Realtime
```
{% endif %}

## Initializing Your Project

To begin with, get your App ID and App Key from your app's [Dashboard > Settings > App Keys](https://console.leancloud.app/app.html?appid={{appid}}#/key).

{% if platform_name === "Objective-C" %}
Import the basic modules into `AppDelegate`:

```objc
#import <AVOSCloud/AVOSCloud.h>
```

Then paste the following code into the `application:didFinishLaunchingWithOptions:` method:

```objc
[AVOSCloud setApplicationId:@"{{appid}}" clientKey:@"{{appkey}}"];
```

{{ docs.alert("Before using the APIs provided by the SDK, make sure you have initialized your application with App ID and App Key.") }}
{% endif %}
{% if platform_name === "Swift" %}
Add the following line to the top of `AppDelegate.swift`:

```swift
import LeanCloud
```

Then add the code below into the function `application(_:didFinishLaunchingWithOptions:)`:

```swift
do {
    try LCApplication.default.set(
        id: "{{appid}}",
        key: "{{appkey}}"
    )
} catch {
    fatalError("\(error)")
}
```
{% endif %}
{% if platform_name === "JavaScript" %}
```LeanStorage
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}"
});
```
```LeanStorage(LiveQuery)
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}"
});
```
```LeanMessage
const realtime = new Realtime({
  appId: '{{appid}}',
  appKey: '{{appkey}}',
});
```
```LeanMessage(RichMediaMessage)
const realtime = new Realtime({
  appId: '{{appid}}',
  appKey: '{{appkey}}',
  // Register plugins for rich media messages
  plugins: [TypedMessagesPlugin],
});
// You need to initialize LeanStorage, too.
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}"
});
```
{% endif %}
{% if platform_name === "Python" %}
Then import `leancloud` and call `init` to initialize it:

```python
import leancloud

leancloud.init("{{appid}}", "{{appkey}}")
# Or use Master Key
# leancloud.init("{{appid}}", master_key="{{masterkey}}")
```
{% endif %}
{% if platform_name === "PHP" %}
Then import `Client` and call `initialize` to initialize it:

```php
use \LeanCloud\Client;
// Provide App ID, App Key, and Master Key as parameters
Client::initialize("{{appid}}", "{{appkey}}", "{{masterkey}}");
Client::setServerUrl("{{host}}");
```
{% endif %}
{% if platform_name === "Java" %}
If you are building a basic Java project, add the following lines to the beginning of your code:

```java
AVOSCloud.initialize("{{appid}}", "{{appkey}}");
```

If you are building for Android, add the following code into the `onCreate` function of the `Application` class:

```java
import cn.leancloud.AVOSCloud;

public class MyLeanCloudApp extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        // Provide this, App ID, and App Key as parameters
        AVOSCloud.initialize(this, "{{appid}}", "{{appkey}}");
    }
}
```

Then specify the permissions needed by the SDK and declare the `MyLeanCloudApp` class in `AndroidManifest.xml`:

```xml
<!-- Basic modules (required) START -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<!-- Basic modules END -->

<application
  …
  android:name=".MyLeanCloudApp" >

  <!-- LeanMessage and push notifications START -->
  <!-- Both LeanMessage and push notifications need PushService -->
  <service android:name="cn.leancloud.push.PushService"/>
  <receiver android:name="cn.leancloud.push.AVBroadcastReceiver">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED"/>
      <action android:name="android.intent.action.USER_PRESENT"/>
      <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
    </intent-filter>
  </receiver>
  <!-- LeanMessage and push notifications END -->

  <!-- Feedback START -->
  <activity
     android:name="cn.leancloud.feedback.ThreadActivity" >
  </activity>
  <!-- Feedback END -->
</application>
```

Since 6.1.0, we also support [initializing SDK without using appKey](sdk_setup_android_securely.html).

If your application uses LeanMessage only without LeanPush, you can disable LeanPush using `AVIMOptions#disableAutoLogin4Push` on initialization:

```java
// AVOSCloud#initialize
AVIMOptions.getGlobalOptions().setDisableAutoLogin4Push(true);
```

{% endif %}
{% if platform_name === ".NET" %}
Import basic modules:

```cs
// LeanStorage
using LeanCloud;
// LeanMessage (optional)
using LeanCloud.Realtime;
```

### Initializing LeanStorage

Run the following code before using LeanStorage:

```cs
AVClient.Initialize("{{appid}}", "{{appkey}}");
```

### Initializing LeanMessage

Run the following code before using LeanMessage:

```cs
const realtime = new AVRealtime("{{appid}}", "{{appkey}}");
```
{% endif %}
{% if platform_name === "Flutter" %}
### Initializing LeanStorage

Add this import statement in the Dart code:

```dart
import 'package:leancloud_storage/leancloud.dart';
```

And initialize SDK as follows:

```dart
LeanCloud.initialize(
    '{{appid}}', '{{appkey}}',
    queryCache: new LCQueryCache())
```

### Initializing LeanMessage

Import `package:leancloud_official_plugin/leancloud_plugin.dart` in `lib/main.dart` of your project:

```dart
import 'package:leancloud_official_plugin/leancloud_plugin.dart';
```

Import `cn.leancloud.AVOSCloud`, `cn.leancloud.AVLogger`, and `cn.leancloud.im.AVIMOptions` in `YourApplication.java` of your project:

```java
import io.flutter.app.FlutterApplication;
import cn.leancloud.AVOSCloud;
import cn.leancloud.AVLogger;
import cn.leancloud.im.AVIMOptions;

public class YourApplication extends FlutterApplication {
  @Override
  public void onCreate() {
    super.onCreate();
    AVIMOptions.getGlobalOptions().setUnreadNotificationEnabled(true);
    AVOSCloud.setLogLevel(AVLogger.Level.DEBUG);
    AVOSCloud.initialize(this, "{{appid}}", "{{appkey}}");
  }
}
```

Note that you also need to declare required permissions in `AndroidManifest.xml`.
Refer to [Java SDK Setup Guide](sdk_setup-java.html#initializing-your-project) for details.

Import `LeanCloud` in `AppDelegate.swift` of your project:

```swift
import Flutter
import LeanCloud

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
    override func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
        do {
            LCApplication.logLevel = .all
            try LCApplication.default.set(
                id: "{{appid}}",
                key: "{{appkey}}")
            GeneratedPluginRegistrant.register(with: self)
            return super.application(application, didFinishLaunchingWithOptions: launchOptions)
        } catch {
            fatalError("\(error)")
        }
    }
}
```

{% endif %}

## Enabling Debug Logs

You can easily trace the problems in your project by turning debug logs on during the development phase. Once enabled, details of every request made by the SDK along with errors will be output to IDE, browser console, or your app's [Dashboard > LeanEngine > App logs](https://console.leancloud.app/cloud.html?appid={{appid}}#/log).

{% if platform_name === "Objective-C" %}
```objc
// Place the line after [AVOSCloud setApplicationId:]; only needs to be called once
[AVOSCloud setAllLogsEnabled:YES];
```
{% endif %}
{% if platform_name === "Swift" %}
```swift
// Place the line before LCApplication.default.set; only needs to be called once
LCApplication.logLevel = .all
```
{% endif %}
{% if platform_name === "Flutter" %}
### LeanStorage

```dart
// Place the line after LeanCloud.initialize
LCLogger.setLevel(LCLogger.DebugLevel);
```

### LeanStorage

Refer to [Swift SDK Setup Guide](sdk_setup-swift.html#debugging) and [Java SDK Setup Guide](sdk_setup-java.html#debugging) for information on how to enable debug logs on iOS and Android platforms.

{% endif %}
{% if platform_name === "JavaScript" %}

```LeanStorage
const AV = require('leancloud-storage');
AV.debug.enable();
AV.debug.disable();
```
```LeanStorage(LiveQuery)
const AV = require('leancloud-storage');
AV.debug.enable();
AV.debug.disable();
```
```LeanMessage
const { debug } = require('leancloud-realtime');
debug.enable();
debug.disable();
```
```LeanMessage(RichMediaMessage)
const { debug } = require('leancloud-realtime');
debug.enable();
debug.disable();
```

Alternatively, you can enable debug logs via configuring `localStorage` (for browsers) or `DEBUG` environment variable (for Node.js applications).


For browsers:

```LeanStorage
localStorage.setItem('debug', 'leancloud*');
```
```LeanStorage(LiveQuery)
localStorage.setItem('debug', 'leancloud*,LC*');
```
```LeanMessage
localStorage.setItem('debug', 'LC*');
```
```LeanMessage(RichMediaMessage)
localStorage.setItem('debug', 'LC*');
```

For Node.js applications:

```LeanStorage
DEBUG=leancloud* npm start
```
```LeanStorage(LiveQuery)
DEBUG=leancloud*,LC* npm start
```
```LeanMessage
DEBUG=LC* npm start
```
```LeanMessage(RichMediaMessage)
DEBUG=LC* npm start
```

{% endif %}
{% if platform_name === "Python" %}
```python
# Place the code at the beginning of the start-up script
# If used in LeanEngine, the start-up script is wsgi.py
import logging

logging.basicConfig(level=logging.DEBUG)
```
{% endif %}
{% if platform_name === "PHP" %}
```php
// Place the line after Client::initialize(); only needs to be called once
Client::setDebug(true);
```
{% endif %}
{% if platform_name === "Java" %}
```java
// Place the line before AVOSCloud.initialize()
AVOSCloud.setLogLevel(AVLogger.Level.DEBUG);
```
{% endif %}
{% if platform_name === ".NET" %}
```cs
// Enable debug logs for LeanStorage
AVClient.HttpLog(Debug.Log);

// Enable debug logs for LeanMessage
AVRealtime.WebSocketLog(Debug.Log);
```
{% endif %}

{% call docs.alertWrap() %}
Make sure debug logs are turned off before your app is published. Failure to do so may lead to the exposure of sensitive data.
{% endcall %}

## Verifying

First of all, make sure you are able to connect to LeanCloud server. You can test it by running the following command:

```sh
ping "{{host}}"
```

If everything goes well, you will see the following response:

```sh
PING api-ucloud.leancloud.cn (123.59.41.31): 56 data bytes
64 bytes from 123.59.41.31: icmp_seq=0 ttl=51 time=9.032 ms
64 bytes from 123.59.41.31: icmp_seq=1 ttl=51 time=7.290 ms
64 bytes from 123.59.41.31: icmp_seq=2 ttl=51 time=8.131 ms
64 bytes from 123.59.41.31: icmp_seq=3 ttl=51 time=9.689 ms
64 bytes from 123.59.41.31: icmp_seq=4 ttl=51 time=6.559 ms
64 bytes from 123.59.41.31: icmp_seq=5 ttl=51 time=8.665 ms
64 bytes from 123.59.41.31: icmp_seq=6 ttl=51 time=8.041 ms
64 bytes from 123.59.41.31: icmp_seq=7 ttl=51 time=8.203 ms
64 bytes from 123.59.41.31: icmp_seq=8 ttl=51 time=6.288 ms
64 bytes from 123.59.41.31: icmp_seq=9 ttl=51 time=7.938 ms

--- api-ucloud.leancloud.cn ping statistics ---
10 packets transmitted, 10 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 6.288/7.984/9.689/0.997 ms
```

{% if platform_name === "Objective-C" %}
Now let's try saving an object to the cloud. Add the following code into the `viewDidLoad` method or any other method that will be called when the app starts:

```objc
AVObject *testObject = [AVObject objectWithClassName:@"TestObject"];
[testObject setObject:@"Hello world!" forKey:@"words"];
[testObject save];
```

Hit `Run` to start debugging. This can be done in either a host machine or a virtual machine.
{% endif %}
{% if platform_name === "Swift" %}
Then add the following code into your project:

```swift
do {
    let testObject = LCObject(className: "TestObject")
    try testObject.set("words", value: "Hello world!")
    let result = testObject.save()
    if let error = result.error {
      print(error)
    }
} catch {
    print(error)
}
```

Hit `Run` to start debugging. This can be done in either a host machine or virtual machine.
{% endif %}
{% if platform_name === "JavaScript" %}
Then add the following code into your project:

```js
const TestObject = AV.Object.extend('TestObject');
const testObject = new TestObject();
testObject.set('words', 'Hello world!');
testObject.save().then((testObject) => {
  console.log('Object saved.')
})
```

Save the file and run it.
{% endif %}
{% if platform_name === "Python" %}
Then add the following code into your project:

```python
TestObject = leancloud.Object.extend('TestObject')
test_object = TestObject()
test_object.set('words', "Hello world!")
test_object.save()
```

Save the file and run it.
{% endif %}
{% if platform_name === "PHP" %}
Then add the following code into your project:

```php
$testObject = new LeanObject("TestObject");
$testObject->set("words", "Hello world!");
try {
    $testObject->save();
    echo "Object saved.";
} catch (Exception $ex) {
    echo "An error occurred.";
}
```

Save the file and run it.
{% endif %}
{% if platform_name === "Java" %}
Then add the following code into your project:

```java
AVObject testObject = new AVObject("TestObject");
testObject.put("words", "Hello world!");
testObject.saveInBackground().blockingSubscribe();
```

Save the file and run it.
{% endif %}
{% if platform_name === "Flutter" %}
Then add the following code into your project:

```dart
LCObject testObject = LCObject('TestObject');
testObject['words'] = 'Hello world!';
await testObject.save()
```
{% endif %}
{% if platform_name === ".NET" %}
Then add the following code into your project:

```cs
AVObject testObject = new AVObject("TestObject");
testObject["words"] = "Hello world!";
Task saveTask = testObject.SaveAsync();
await saveTask;
```

Save the file and run it.
{% endif %}

Then go to your app's [Dashboard > LeanStorage > Data > `TestObject`](https://console.leancloud.app/data.html?appid={{appid}}#/TestObject). If you see the following content, it means that you have correctly installed the SDK.

![A row shows up in the table with "words" to be "Hello world!".](images/testobject_saved.png)

See [Debugging](#Debugging) if you're not seeing the content.

## Debugging

This guide is written for the latest version of our SDK. If you encounter any error, please first make sure you have the latest version installed.

### `401 Unauthorized`

If you get a `401` error or see the following content in network logs:

```json
{
  "code": 401,
  "error": "Unauthorized."
}
```

It means that the App ID or App Key might be incorrect or don't match. If you have multiple apps, you might have used the App ID of one app with the App Key of another one, which will lead to such error.

### Client Cannot Access the Internet

Make sure you have granted enough permissions for your mobile app.
